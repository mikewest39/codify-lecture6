// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Simplified schema from the original
// The onDelete: Cascade operations means that deleting an album will delete it's songs, and deleting an artist will delete it's albums and songs
model Song {
  id       Int    @id @default(autoincrement()) // Alternatively can do UUID's with @default(uuid())
  title    String
  artistId Int
  artist   Artist @relation("Artist's Songs", fields: [artistId], references: [id], onDelete: Cascade)
  albumId  Int
  album    Album  @relation("Album's Songs", fields: [albumId], references: [id], onDelete: Cascade)
}

model Artist {
  id            Int     @id @default(autoincrement())
  displayName   String
  songs         Song[]  @relation("Artist's Songs")
  albums        Album[] @relation("Artist's Albums")
  userProfile   User    @relation("UserProfile", fields: [userProfileId], references: [id], onDelete: Cascade)
  userProfileId Int     @unique
}

model Album {
  id       Int    @id @default(autoincrement())
  name     String
  artistId Int
  artist   Artist @relation("Artist's Albums", fields: [artistId], references: [id], onDelete: Cascade)
  songs    Song[] @relation("Album's Songs")
}

model User {
  id              Int     @id @default(autoincrement())
  name            String
  email           String  @unique
  phoneNumber     String? @unique
  artistProfile   Artist? @relation("UserProfile")
  artistProfileId Int?

  // Many to many self relation
  // The user can follow many other users, and can be followed by many other users
  followedBy User[] @relation("UserFollows")
  following  User[] @relation("UserFollows")
}
